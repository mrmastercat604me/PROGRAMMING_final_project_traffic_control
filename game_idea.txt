#########
#---------------#
MAZE-FLOW-CONNECT
#---------------#
GENERATE A MAZE WITH COLOURED PAIRS
ALL PAIRS CONNECT AND CAN BE SOLVED
ONCE ALL PAIRS 
#########

'''
To guarantee you get exactly k pairs every time (or know for sure that it’s impossible),
you need to move from a “greedy one-shot” strategy to a small backtracking search over the
placement of pairs. Here’s the gist:

Pre-collect all candidate edge tiles for each edge.

Recursively place pair 0, pair 1, …, pair k−1.

For each pair, loop through a (shuffled) list of possible (start, edge) × (goal, edge') choices.

Attempt to carve a path avoiding any tiles already reserved by earlier pairs.

If successful, mark those tiles reserved and recurse to the next pair.

If the recursion fails, undo the reservation and try the next candidate.

If you exhaust all choices for pair i without success, backtrack to pair i−1.

If you finish pair k−1, you’ve placed all k disjoint paths.

This guarantees that either you find k fully disjoint routes or you’ll exhaust the search
and know it’s not possible with the given labyrinth and parameters.
'''


All functions must include a comment explaining:
-What the function does
    What parameters it takes (if any)
    What it returns (if anything)
All loops must include a comment describing their purpose.
All conditionals (if, elif, else) must have a comment explaining what they check for and why.
Failure to properly comment your code will result in a point deduction.